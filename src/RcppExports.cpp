// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// subsample
std::vector<std::size_t> subsample(Rcpp::NumericMatrix& data, Rcpp::NumericMatrix& points);
RcppExport SEXP _SPlit_subsample(SEXP dataSEXP, SEXP pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type points(pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(subsample(data, points));
    return rcpp_result_gen;
END_RCPP
}
// sp_cpp
Rcpp::NumericMatrix sp_cpp(std::size_t& des_num, int dim_num, Rcpp::NumericMatrix& ini, Rcpp::NumericMatrix& distsamp, bool thin, Rcpp::NumericMatrix& bd, std::size_t& point_num, int it_max, double tol, int num_proc, double n0, Rcpp::NumericVector& wts, bool rnd_flg);
RcppExport SEXP _SPlit_sp_cpp(SEXP des_numSEXP, SEXP dim_numSEXP, SEXP iniSEXP, SEXP distsampSEXP, SEXP thinSEXP, SEXP bdSEXP, SEXP point_numSEXP, SEXP it_maxSEXP, SEXP tolSEXP, SEXP num_procSEXP, SEXP n0SEXP, SEXP wtsSEXP, SEXP rnd_flgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t& >::type des_num(des_numSEXP);
    Rcpp::traits::input_parameter< int >::type dim_num(dim_numSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type ini(iniSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type distsamp(distsampSEXP);
    Rcpp::traits::input_parameter< bool >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type bd(bdSEXP);
    Rcpp::traits::input_parameter< std::size_t& >::type point_num(point_numSEXP);
    Rcpp::traits::input_parameter< int >::type it_max(it_maxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type num_proc(num_procSEXP);
    Rcpp::traits::input_parameter< double >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type wts(wtsSEXP);
    Rcpp::traits::input_parameter< bool >::type rnd_flg(rnd_flgSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_cpp(des_num, dim_num, ini, distsamp, thin, bd, point_num, it_max, tol, num_proc, n0, wts, rnd_flg));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SPlit_subsample", (DL_FUNC) &_SPlit_subsample, 2},
    {"_SPlit_sp_cpp", (DL_FUNC) &_SPlit_sp_cpp, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_SPlit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
